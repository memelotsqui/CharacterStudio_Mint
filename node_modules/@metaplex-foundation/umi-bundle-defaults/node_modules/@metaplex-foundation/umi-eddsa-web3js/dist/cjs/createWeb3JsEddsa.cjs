'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var umi = require('@metaplex-foundation/umi');
var umiWeb3jsAdapters = require('@metaplex-foundation/umi-web3js-adapters');
var ed25519 = require('@noble/curves/ed25519');
var solanaCliConfig = require('@soceanfi/solana-cli-config');
var web3_js = require('@solana/web3.js');
var fs = require('fs');

function createWeb3JsEddsa() {
  const generateKeypair = () => umiWeb3jsAdapters.fromWeb3JsKeypair(web3_js.Keypair.generate());
  const createKeypairFromSecretKey = secretKey => umiWeb3jsAdapters.fromWeb3JsKeypair(web3_js.Keypair.fromSecretKey(secretKey));
  const createKeypairFromSeed = seed => umiWeb3jsAdapters.fromWeb3JsKeypair(web3_js.Keypair.fromSeed(seed));
  const createKeypairFromFile = path => createKeypairFromSecretKey(new Uint8Array(JSON.parse(fs.readFileSync(path).toString())));
  const createKeypairFromSolanaConfig = () => umiWeb3jsAdapters.fromWeb3JsKeypair(solanaCliConfig.SolanaCliConfig.load().loadKeypair());
  const isOnCurve = input => web3_js.PublicKey.isOnCurve(umiWeb3jsAdapters.toWeb3JsPublicKey(umi.publicKey(input)));
  const findPda = (programId, seeds) => {
    const [key, bump] = web3_js.PublicKey.findProgramAddressSync(seeds, umiWeb3jsAdapters.toWeb3JsPublicKey(umi.publicKey(programId)));
    return [umiWeb3jsAdapters.fromWeb3JsPublicKey(key), bump];
  };
  const sign = (message, keypair) => ed25519.ed25519.sign(message, keypair.secretKey.slice(0, 32));
  const verify = (message, signature, publicKey) => ed25519.ed25519.verify(signature, message, umi.publicKeyBytes(publicKey));
  return {
    generateKeypair,
    createKeypairFromSecretKey,
    createKeypairFromSeed,
    createKeypairFromFile,
    createKeypairFromSolanaConfig,
    isOnCurve,
    findPda,
    sign,
    verify
  };
}

exports.createWeb3JsEddsa = createWeb3JsEddsa;
//# sourceMappingURL=createWeb3JsEddsa.cjs.map
