import { publicKey, publicKeyBytes } from '@metaplex-foundation/umi';
import { fromWeb3JsKeypair, toWeb3JsPublicKey, fromWeb3JsPublicKey } from '@metaplex-foundation/umi-web3js-adapters';
import { ed25519 } from '@noble/curves/ed25519';
import { SolanaCliConfig } from '@soceanfi/solana-cli-config';
import { Keypair, PublicKey } from '@solana/web3.js';
import { readFileSync } from 'fs';

function createWeb3JsEddsa() {
  const generateKeypair = () => fromWeb3JsKeypair(Keypair.generate());
  const createKeypairFromSecretKey = secretKey => fromWeb3JsKeypair(Keypair.fromSecretKey(secretKey));
  const createKeypairFromSeed = seed => fromWeb3JsKeypair(Keypair.fromSeed(seed));
  const createKeypairFromFile = path => createKeypairFromSecretKey(new Uint8Array(JSON.parse(readFileSync(path).toString())));
  const createKeypairFromSolanaConfig = () => fromWeb3JsKeypair(SolanaCliConfig.load().loadKeypair());
  const isOnCurve = input => PublicKey.isOnCurve(toWeb3JsPublicKey(publicKey(input)));
  const findPda = (programId, seeds) => {
    const [key, bump] = PublicKey.findProgramAddressSync(seeds, toWeb3JsPublicKey(publicKey(programId)));
    return [fromWeb3JsPublicKey(key), bump];
  };
  const sign = (message, keypair) => ed25519.sign(message, keypair.secretKey.slice(0, 32));
  const verify = (message, signature, publicKey) => ed25519.verify(signature, message, publicKeyBytes(publicKey));
  return {
    generateKeypair,
    createKeypairFromSecretKey,
    createKeypairFromSeed,
    createKeypairFromFile,
    createKeypairFromSolanaConfig,
    isOnCurve,
    findPda,
    sign,
    verify
  };
}

export { createWeb3JsEddsa };
//# sourceMappingURL=createWeb3JsEddsa.mjs.map
